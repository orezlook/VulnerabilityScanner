import socket
import requests
from bs4 import BeautifulSoup
from openpyxl import Workbook
import ipaddress
import telnetlib

# Ottengo i CVE relativi a un servizio e sistema operativo specifico - ricorda che il database pubblico è NVD
def get_cve_info(service_name, os):
    try:
        response = requests.get(f"https://services.nvd.nist.gov/rest/json/cves/1.0?keyword={service_name}+{os}")
        data = response.json()

        cve_list = []
        if "result" in data and "CVE_Items" in data["result"]:
            for cve_item in data["result"]["CVE_Items"]:
                cve_id = cve_item["cve"]["CVE_data_meta"]["ID"]
                cve_description = cve_item["cve"]["description"]["description_data"][0]["value"]
                cve_list.append((cve_id, cve_description))

        return cve_list

    except requests.exceptions.RequestException as e:
        print(f"Errore durante la ricerca delle vulnerabilità per il servizio {service_name} e sistema operativo {os}: {e}\n")
        return []

# Eseguo scansione delle porte su IP o intervallo di IP
def scan_ports(ip_range, start_port, end_port, excel_filename):
    print(f"Scansione delle porte su {ip_range}...\n")

    # Creazione del file Excel
    wb = Workbook()
    ws = wb.active
    ws.title = "Vulnerabilità"

    # Intestazione del foglio Excel
    ws.append(["Indirizzo IP", "Sistema Operativo", "Porta", "CVE", "Descrizione", "Riferimenti pubblici"])

    if "-" in ip_range:
        ip_start, ip_end = ip_range.split("-")
        ip_start = ip_start.strip()
        ip_end = ip_end.strip()

        for ip in ipaddress.IPv4Network(f"{ip_start}/{ip_end}"):
            os = get_os(ip, start_port, end_port)
            scan_ip(ip, start_port, end_port, os, ws)

    else:
        ip = ipaddress.ip_address(ip_range)
        os = get_os(ip, start_port, end_port)
        scan_ip(ip, start_port, end_port, os, ws)

    # Salvataggio del file Excel
    wb.save(f"{excel_filename}.xlsx")

    print(f"Scansione completata. I risultati sono stati salvati nel file {excel_filename}.xlsx.")

# Rilevamento del sistema operativo
def get_os(ip, start_port, end_port):
    try:
        with telnetlib.Telnet(str(ip)) as tn:
            tn.write(b"quit\n")
            output = tn.read_all().decode("utf-8")

            if "Windows" in output:
                return "Windows"
            elif "Linux" in output:
                return "Linux"

    except ConnectionRefusedError:
        print(f"Connessione rifiutata per {ip}\n")

    return determine_os_from_services(ip, start_port, end_port)

# Determinazione del sistema operativo basata sui servizi
def determine_os_from_services(ip, start_port, end_port):
    open_ports = []
    for port in range(start_port, end_port + 1):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(2)
            result = s.connect_ex((str(ip), port))
            if result == 0:
                open_ports.append(port)

    if 22 in open_ports:
        return "Linux"
    elif 3389 in open_ports:
        return "Windows"
    elif 135 in open_ports or 445 in open_ports:
        return "Windows"

    return "Unknown"

# Eseguo scansione delle porte su un indirizzo IP
def scan_ip(ip, start_port, end_port, os, ws):
    print(f"Scansione indirizzo IP: {ip}...\n")

    for port in range(start_port, end_port + 1):
        try:
            with telnetlib.Telnet(str(ip), port, timeout=2) as tn:
                service_name = get_service_name(port)
                print(f"Porta {port} su {ip} è aperta.")

                # Ottenimento dei CVE per il servizio e sistema operativo
                cve_list = get_cve_info(service_name, os)

                if len(cve_list) > 0:
                    for cve_id, cve_description in cve_list:
                        ws.append([str(ip), os, port, cve_id, cve_description, ""])
                else:
                    ws.append([str(ip), os, port, "Chiusa", "", ""])

                tn.write(b"quit\n")

        except ConnectionRefusedError:
            print(f"Connessione rifiutata per {ip}:{port}\n")
        except Exception as e:
            print(f"Errore durante la connessione a {ip}:{port}: {e}\n")

# Ottengo il nome del servizio basato sulla porta
def get_service_name(port):
    service_names = {
        21: "FTP",
        22: "SSH",
        23: "Telnet",
        25: "SMTP",
        80: "HTTP",
        443: "HTTPS",
    }
    return service_names.get(port, "Unknown")

# Controllo argomenti di input
ip_range = input("Inserisci l'indirizzo IP o l'intervallo di indirizzi IP da scansionare (es. x.x.x.x o x.x.x.x-x.x.x.x): ")
start_port = int(input("Inserisci la porta iniziale: "))
end_port = int(input("Inserisci la porta finale: "))
excel_filename = input("Inserisci il nome del file Excel per i risultati: ")

# Eseguo scansione
scan_ports(ip_range, start_port, end_port, excel_filename)
